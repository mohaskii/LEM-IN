diff --git a/main.go b/main.go
index cad8841..3c41f72 100644
--- a/main.go
+++ b/main.go
@@ -2,16 +2,32 @@ package main
 
 import (
 	"fmt"
+	"lemIn/objects"
 	"lemIn/tools"
 )
 
 func main() {
 	tools.PutAntsOnPaths()
-	for _, p := range tools.ValidePaths {
-		fmt.Println(p)
-		fmt.Println("")
-		fmt.Println("===============================================================================================")
+	TheFirstPath := tools.ValidePaths[0]
+	for _, v:= range objects.Start.AntsInTheRoom{
+		objects.IsOut[v.Name]=true
 	}
+	fmt.Println(TheFirstPath.RommsOfThePath)
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	fmt.Println(TheFirstPath.MoveAllTheAntsInThePath())
+	// for _, v := range TheFirstPath.PlacedAnts {
+	// 	fmt.Println(v.Name)
+	// 	fmt.Println(v.CurentPlace)
+	// 	fmt.Printf("this is the start room name : %v\n", objects.Start.Name)
+	// 	fmt.Println("==========================================================================================================")
+	// }
 }
 
 /* exemple that return empty Board
diff --git a/objects/Rooms.go b/objects/Rooms.go
index 7ac7ae7..d28d2d7 100644
--- a/objects/Rooms.go
+++ b/objects/Rooms.go
@@ -1,44 +1,88 @@
 package objects
 
 import (
-	"errors"
 	"fmt"
 )
 
 type Room struct {
-	Name string
+	Name        string
 	LInkedRooms []string
 	//Cords
-	X int
-	Y int
+	X             int
+	Y             int
+	AntsInTheRoom []*Ant
 }
 
-type Ant struct{
-	Name string
-	CurentPlace string
+type Ant struct {
+	Name        string
 	VisitedRoom []string
 }
 
 type Path struct {
 	RommsOfThePath []string
-	PlacedAnts []Ant
+	PlacedAnts     []*Ant
 }
 
 var Start Room
 var End Room
-var OtherRooms []*Room
-var RoomRegister = map[string]*Room{} 
-var Ants []*Ant
+var RoomRegister = map[string]*Room{}
+var IsOut = make(map[string]bool, len(Start.AntsInTheRoom))
+var AmontOfAllAnts = len(Start.AntsInTheRoom)
 
-func (r *Room) LinkWith(thelikedRoomName string){
-	r.LInkedRooms = append(r.LInkedRooms,  thelikedRoomName)
+func (r *Room) LinkWith(thelikedRoomName string) {
+	r.LInkedRooms = append(r.LInkedRooms, thelikedRoomName)
 }
 
-func (a *Ant) MoveOn(theRoomName string ) error{
-	if _, OnIt  := RoomRegister[theRoomName]; !OnIt {
-		return errors.New(fmt.Sprintf("the room '%v' do not exist ", theRoomName))
+func (a *Ant) MoveOn(theRoomName string) error {
+	if _, OnIt := RoomRegister[theRoomName]; !OnIt {
+		return fmt.Errorf("the room '%v' do not exist ", theRoomName)
 	}
-	a.CurentPlace = theRoomName
+	RoomRegister[theRoomName].AntsInTheRoom = append(RoomRegister[theRoomName].AntsInTheRoom, a)
 	a.VisitedRoom = append(a.VisitedRoom, theRoomName)
+	
 	return nil
 }
+
+
+
+func (p *Path) MoveAllTheAntsInThePath() string {
+	//set the map
+
+	theMouves := ""
+
+
+	for i := range p.RommsOfThePath {
+		theReversed := (len(p.RommsOfThePath)-1) - i
+		if  p.RommsOfThePath[theReversed] != End.Name && p.RommsOfThePath[theReversed] != Start.Name {
+			//we check if got an Ant in the Roomm
+			TheRoom := RoomRegister[p.RommsOfThePath[theReversed]]
+
+			if len(TheRoom.AntsInTheRoom) == 1 {
+				// we move the ant on the next room
+				TheAnt := TheRoom.AntsInTheRoom[0]
+				TheAnt.MoveOn(p.RommsOfThePath[theReversed+1])
+				RoomRegister[p.RommsOfThePath[theReversed]].AntsInTheRoom = []*Ant{} 
+				theMouves += fmt.Sprintf(" %s-%s", TheAnt.Name, p.RommsOfThePath[theReversed+1])
+			}
+		}
+	}
+	for _, v := range p.PlacedAnts {
+		if IsOut[v.Name] {
+			v.MoveOn(p.RommsOfThePath[1])
+			IsOut[v.Name] = false
+			theMouves += fmt.Sprintf(" %s-%s", v.Name, p.RommsOfThePath[1]) 
+			break
+		}
+	}
+	return theMouves
+}
+
+// func MoveAllAnts () []string{
+// 	tabOfMove := []string{}
+// 	for {
+// 		for i := range tools.ValidePaths {
+// 			tools.ValidePaths[i]
+
+// 		}
+// 	}
+// }
diff --git a/tools/BFS.go b/tools/BFS.go
index 0f212c0..2cb2faf 100644
--- a/tools/BFS.go
+++ b/tools/BFS.go
@@ -7,14 +7,14 @@ import (
 var AlreadyExploredRoom map[string]bool
 
 func GetValidPath() []objects.Path {
-ValidPaths := []objects.Path{}
+	ValidPaths := []objects.Path{}
 	//resset the neework
 	SetAllRoomsFalse()
 	//check If on Start Childs reach the End Room
 	for _, v := range objects.Start.LInkedRooms {
 		if v == objects.End.Name {
 			NewPath := objects.Path{}
-			NewPath.RommsOfThePath= []string{objects.Start.Name, objects.End.Name}
+			NewPath.RommsOfThePath = []string{objects.Start.Name, objects.End.Name}
 			break
 		}
 	}
@@ -22,7 +22,6 @@ ValidPaths := []objects.Path{}
 	rootPaths := GetUnEploredStartLinkedRoom()
 	//intialize the  previous befor the update
 	PreviousPath := []string{}
-
 	for len(rootPaths) != 0 {
 		if len(rootPaths) == 1 && TabCompare(PreviousPath, rootPaths[0]) {
 			break
@@ -30,7 +29,7 @@ ValidPaths := []objects.Path{}
 		PotentatielValidPath := ValidePathsFounded(rootPaths)
 		for _, v := range PotentatielValidPath {
 			NewPath := objects.Path{}
-			NewPath.RommsOfThePath=  v
+			NewPath.RommsOfThePath = v
 			ValidPaths = append(ValidPaths, NewPath)
 			SetAllRoomsFalse()
 			RemovePathFromTheNetwork(ValidPaths)
@@ -137,7 +136,8 @@ func ValidePathsFounded(Paths [][]string) [][]string {
 	}
 	return ValidePath
 }
-//make an function to remove path 
+
+//make an function to remove path
 // 	To do
 
 func TabCompare(tab1 []string, tab2 []string) bool {
diff --git a/tools/PutAntsOnPath.go b/tools/PutAntsOnPath.go
index ed6b4bc..bccee33 100644
--- a/tools/PutAntsOnPath.go
+++ b/tools/PutAntsOnPath.go
@@ -13,9 +13,9 @@ var AlreadyPlaced map[string]bool
 var LenValidfePath = len(ValidePaths)
 
 func PutAntsOnPaths() {
-	for _, Ant := range objects.Ants {
+	for _, Ant := range objects.Start.AntsInTheRoom {
 		TheIndexOfGoodPath := FindTheGoodPath()
-		ValidePaths[TheIndexOfGoodPath].PlacedAnts = append(ValidePaths[TheIndexOfGoodPath].PlacedAnts, *Ant)
+		ValidePaths[TheIndexOfGoodPath].PlacedAnts = append(ValidePaths[TheIndexOfGoodPath].PlacedAnts, Ant)
 	}
 }
 
diff --git a/tools/miniTools.go b/tools/miniTools.go
index 6a9c470..1fcee42 100644
--- a/tools/miniTools.go
+++ b/tools/miniTools.go
@@ -69,16 +69,17 @@ func ExploitTheExpemle(TheExempleFileName string) bool {
 	}
 	AntInint(NumbersOfAnts)
 	LOLO()
+
+	fmt.Println("ok")
 	return true
 }
 
 func AntInint(Numbers int) {
 	for i := 0; i < Numbers; i++ {
 		NewAnt := objects.Ant{}
-		NewAnt.CurentPlace = objects.Start.Name
-		NewAnt.Name = "L" + string('1'+i)
+		NewAnt.Name = "L" + strconv.Itoa(i+1)
 		NewAnt.VisitedRoom = append(NewAnt.VisitedRoom, objects.RoomRegister[objects.Start.Name].Name)
-		objects.Ants = append(objects.Ants, &NewAnt)
+		objects.Start.AntsInTheRoom = append(objects.Start.AntsInTheRoom, &NewAnt)
 	}
 
 }
@@ -113,7 +114,6 @@ func RoomInit(typeOfRoom string, RoomElements []string) {
 	x, _ := strconv.Atoi(RoomElements[1])
 	y, _ := strconv.Atoi(RoomElements[2])
 	NewRoom.X, NewRoom.Y = x, y
-	objects.OtherRooms = append(objects.OtherRooms, &NewRoom)
 	objects.RoomRegister[NewRoom.Name] = &NewRoom
 
 }
